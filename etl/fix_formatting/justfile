log_prefix := "[JUST][fix_headers]"

run md_src_fpath md_dest_fpath:
    just _fix_ktdt "{{md_src_fpath}}" "{{md_dest_fpath}}"

# sweeping attempt to fix all the ktdt issues, but its not perfect
_fix_ktdt md_src_fpath md_dest_fpath:
    #!/usr/bin/env python3
    import re, sys

    with open("{{md_src_fpath}}", "r", encoding="utf-8") as f:
        text = f.read()

    # Regex with verbose mode:
    #  - Must escape '#' as '\#' in verbose mode
    #  - We gather up to the next key or end-of-file.
    pattern = re.compile(
        r'''(?ixs)
        (?:\#{1,6}[ \t]+)?    # optional heading markdown (like "#### ")
        (?:\|\s*)?            # optional pipe syntax "| "
        (?:\*\*)?             # optional leading bold "**"
        (Keywords|Type|Distance|Target|Trigger)
        (?:\*\*)?             # optional closing bold
        \s*[:|]+\s*           # delimiter: ":" or "|" (one or more), optional spaces
        (.*?)                 # capture everything until next key/EOF
        (?=
            (?:\#{1,6}[ \t]+)?   # optional heading
            (?:\|\s*)?           # optional pipe
            (?:\*\*)?            # optional bold
            (Keywords|Type|Distance|Target|Trigger)
            (?:\*\*)?
            \s*[:|]+
            | \Z                 # or end of file
        )
        ''',
        # inline flags: i (ignore case), x (verbose), s (dot matches newlines)
    )

    def replacer(match):
        """
        For each matched key-value pair, do the following:
          - Normalize the key to "Keywords", "Type", etc.
          - Strip leading/trailing whitespace from the value.
          - Remove any leading or trailing '**' from the value
            (in case the user typed something like "**Keywords:** ** Melee...").
          - Ensure there's a newline if needed before the replaced text.
        """
        key = match.group(1)     # e.g. "Keywords", "type", "DISTANCE", etc.
        val = match.group(2)     # everything up to the next key or EOF

        # Normalize key: e.g. "keywords" -> "Keywords"
        key = key.capitalize()

        # Strip leading/trailing whitespace
        val = val.strip()

        # If there's a leading "**" in the captured value, remove it:
        # e.g. "** Melee, Strike" -> "Melee, Strike"
        val = re.sub(r'^\*\*\s*', '', val)
        # If there's a trailing "**" in the captured value, remove it too
        val = re.sub(r'\s*\*\*$', '', val)

        # Build the new line: "**Key:** Value\n"
        new_text = f"**{key}:** {val}\n\n"

        # If the match isn't at the start of the file and the preceding
        # character isn't a newline, add one so it starts on its own line
        start_idx = match.start()
        if start_idx > 0:
            if match.string[start_idx - 1] != '\n':
                new_text = "\n" + new_text

        return new_text

    # Substitute in the entire file
    result = pattern.sub(replacer, text)

    # Write updated content back to the same file in-place
    with open("{{md_dest_fpath}}", "w", encoding="utf-8") as f:
        f.write(result)