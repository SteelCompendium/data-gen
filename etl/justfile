##################################################
# Modules
##################################################

mod heroes 'heroes.just'

mod extract_heroes_sections 'extract_heroes_sections.just'
mod extract_html_sections 'extract_html_sections.just'
mod html_to_md 'html_to_md.just'
mod lint 'lint.just'
mod md_to_html 'md_to_html.just'

##################################################
# Constants and env vars
##################################################

data_gen_root_dpath := justfile_directory() / ".."
steel_compendium_root_dpath := data_gen_root_dpath / ".."
staging_dpath := data_gen_root_dpath / "staging"

##################################################
# Public Recipes
##################################################

export BASH_ENV := ".utils/.utilsrc"
set shell := ["bash", "-c"]

default:
    @just --list --unsorted

clean_and_prep:
    #!/usr/bin/env bash
    set -euo pipefail
    if [ -d "{{staging_dpath}}" ]; then
        rm -rf "{{staging_dpath}}"
    fi
    mkdir -p "{{staging_dpath}}"

gen: clean_and_prep gen_heroes

gen_heroes:
    #!/usr/bin/env bash
    set -euo pipefail
    # TODO - im pretty sure this is used in assembly
    #cp "{{data_gen_root_dpath}}/Rules/Draw Steel Heroes.md" "{{staging_dpath}}/Draw Steel Heroes.md"
    just heroes gen "{{data_gen_root_dpath}}/Rules/Draw Steel Heroes.md"

# deletes all the (non-hidden) files in a directory
delete_dir_except_git dir_to_delete:
    #!/usr/bin/env bash
    set -euo pipefail
    tempdir="$(mktemp -d)"
    echo "$tempdir"
    # add a dummy file to avoid crashing in case the dir is empty
    touch "{{dir_to_delete}}/dummy.txt"
    mv "{{dir_to_delete}}"/* "${tempdir}/"
    # by default dotglob will prevent hidden files from being included in * wildcard globs
    if [ -d "${tempdir}/.git" ]; then
        mv "${tempdir}/.git" "{{dir_to_delete}}"
    fi
    if [ -f "${tempdir}/README.md" ]; then
        mv "${tempdir}/README.md" "{{dir_to_delete}}"
    fi
    rm -rf "$tempdir"

add_license dir:
    #!/usr/bin/env bash
    set -euo pipefail
    cd "{{dir}}"
    # TODO - update this when final license is released
    echo "The Steel Compendium is an independent product published under the DRAW STEEL Creator License and is not affiliated with MCDM Productions, LLC. DRAW STEEL Â© 2025 MCDM Productions, LLC." > LICENSE

switch_repos_to branch:
    #!/usr/bin/env bash
    set -euo pipefail
    find "{{steel_compendium_root_dpath}}" -maxdepth 1 -type d -name "data-*" | while read -r data_repo_dpath; do
        # Skip the sdk
        if [ "$data_repo_dpath" == "data-sdk-npm" ]; then
            continue;
        fi
        cd "$data_repo_dpath"
        if [ ! -d ".git" ]; then
            echo >&2 "Directory is not a git repo: $data_repo_dpath"
            exit 1
        fi
        if [[ "$data_repo_dpath" == *data-gen ]]; then
            echo >&2 "Skipping: $data_repo_dpath"
        else
            echo >&2 "Switching git repo to '{{branch}}' branch: $data_repo_dpath"
            git checkout "{{branch}}"
        fi
    done

##################################################
# Private Recipes
##################################################

# Prints the absolute path to the data-gen repo
[private]
_data_gen_dpath:
    #!/usr/bin/env bash
    set -euo pipefail
    realpath "{{data_gen_root_dpath}}"

# Prints the absolute path to the Steel Compendium parent directory
[private]
_steel_compendium_dpath:
    #!/usr/bin/env bash
    set -euo pipefail
    realpath "{{data_gen_root_dpath}}"

# Prints the absolute path to the staging directory
[private]
_staging_dpath:
    #!/usr/bin/env bash
    set -euo pipefail
    mkdir -p "{{staging_dpath}}"
    realpath "{{staging_dpath}}"

[private]
_print_section name:
    #!/usr/bin/env bash
    set -euo pipefail
    echo
    echo '{{name}}'
    echo '============================================================'
    echo

