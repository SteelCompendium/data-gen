##################################################
# Modules
##################################################

# Top-level
mod heroes 'heroes.just'
mod monsters 'monsters.just'
mod adventures 'adventures.just'
mod unified 'unified.just'

# utils
mod features 'features.just'
mod features_config 'features_config.just'
mod extract_html_sections 'extract_html_sections.just'
mod frontmatter 'frontmatter.just'
mod featureblocks 'featureblocks.just'
mod heroes_sections 'heroes_sections.just'
mod heroes_frontmatter 'heroes_frontmatter.just'
mod html 'html.just'
mod index 'index.just'
mod markdown 'markdown.just'
mod monsters_sections 'monsters_sections.just'
mod monsters_frontmatter 'monsters_frontmatter.just'
mod sc_classification 'sc_classification.just'
mod section_config 'section_config.just'
mod statblocks 'statblocks.just'

##################################################
# Constants and env vars
##################################################

data_gen_root_dpath := justfile_directory() / ".."
steel_compendium_root_dpath := data_gen_root_dpath / ".."
staging_dpath := data_gen_root_dpath / "staging"
input_dpath := data_gen_root_dpath / "input"

##################################################
# Public Recipes
##################################################

export BASH_ENV := ".utils/.utilsrc"
set shell := ["bash", "-c"]

default:
    @just --list --unsorted

gen: _wipe_all gen_heroes gen_monsters gen_adventures unify

gen_heroes:
    #!/usr/bin/env bash
    set -euo pipefail
    just _print_title "Heroes"
    just heroes gen "{{data_gen_root_dpath}}/input/heroes/Draw Steel Heroes.md"

gen_monsters:
    #!/usr/bin/env bash
    set -euo pipefail
    just _print_title "Monsters"
    echo "TODO - Monster book parsing not yet implemented."
    just monsters gen "{{data_gen_root_dpath}}/input/monsters/Draw Steel Monsters.md"

gen_adventures:
    #!/usr/bin/env bash
    set -euo pipefail
    just _print_title "Adventures"
    echo "TODO - Monster book parsing not yet implemented."
    just adventures gen ""

unify:
    #!/usr/bin/env bash
    set -euo pipefail
    just _print_title "Unify"
    just unified gen_unified

switch_repos_to branch:
    #!/usr/bin/env bash
    set -euo pipefail
    find "{{steel_compendium_root_dpath}}" -maxdepth 1 -type d -name "data-*" | while read -r data_repo_dpath; do
        # Skip the sdk
        if [ "$data_repo_dpath" == "data-sdk-npm" ]; then
            continue;
        fi
        cd "$data_repo_dpath"
        if [ ! -d ".git" ]; then
            echo >&2 "Directory is not a git repo: $data_repo_dpath"
            exit 1
        fi
        if [[ "$data_repo_dpath" == *data-gen ]]; then
            echo >&2 "Skipping: $data_repo_dpath"
        else
            echo >&2 "Switching git repo to '{{branch}}' branch: $data_repo_dpath"
            git checkout "{{branch}}"
        fi
    done

##################################################
# Private Recipes
##################################################

# Prints the absolute path to the data-gen repo
[private]
_data_gen_dpath:
    #!/usr/bin/env bash
    set -euo pipefail
    realpath "{{data_gen_root_dpath}}"

# Prints the absolute path to the Steel Compendium parent directory
[private]
_steel_compendium_dpath:
    #!/usr/bin/env bash
    set -euo pipefail
    realpath "{{steel_compendium_root_dpath}}"

# Prints the absolute path to the staging directory
[private]
_staging_dpath:
    #!/usr/bin/env bash
    set -euo pipefail
    mkdir -p "{{staging_dpath}}"
    realpath "{{staging_dpath}}"

# Prints the absolute path to the staging directory
[private]
_input_dpath:
    #!/usr/bin/env bash
    set -euo pipefail
    mkdir -p "{{input_dpath}}"
    realpath "{{input_dpath}}"

[private]
_print_title name:
    #!/usr/bin/env bash
    set -euo pipefail
    echo
    figlet '{{name}}'
    echo '===================================================================================================='
    echo

[private]
_print_header name:
    #!/usr/bin/env bash
    set -euo pipefail
    echo
    echo '{{name}}'
    echo '==========================================================================='
    echo

[private]
_print_section name:
    #!/usr/bin/env bash
    set -euo pipefail
    echo
    name="{{name}}"
    prefix="─── $name "
    prefix_len=$(printf '%s' "$prefix" | wc -m)
    pad_len=$(( 75 - prefix_len ))
    if (( pad_len < 0 )); then pad_len=0; fi
    pad=$(printf '%0.s─' $(seq 1 "$pad_len"))
    printf '%s\n\n' "${prefix}${pad}"

[private]
_wipe_all:
    just _wipe_dir "{{staging_dpath}}"

[private]
_wipe_dir dpath:
    #!/usr/bin/env bash
    set -euo pipefail
    just _print_section "Wiping directory '{{dpath}}'"
    if [ -d "{{dpath}}" ]; then
        rm -rf "{{dpath}}"
    fi
    mkdir -p "{{dpath}}"

# Wipes a Steel Compendium data-* repo, copies data (markdown, etc) from a given dir into it, then adds LICENSE
[private]
_copy_data_to_repo src_dpath sc_repo_name rel_dpath="":
    #!/usr/bin/env bash
    set -euo pipefail
    just _print_section "Copying data to destination repo ({{sc_repo_name}})"
    dest_dir="{{steel_compendium_root_dpath}}/{{sc_repo_name}}"
    just _delete_dir_except_git "$dest_dir"
    mkdir -p "${dest_dir}{{rel_dpath}}"
    cp -R "{{src_dpath}}"/* "${dest_dir}{{rel_dpath}}"
    just _add_license "$dest_dir"

# deletes all the (non-hidden) files in a directory
[private]
_delete_dir_except_git dir_to_delete:
    #!/usr/bin/env bash
    set -euo pipefail
    tempdir="$(mktemp -d)"
    echo "$tempdir"
    # add a dummy file to avoid crashing in case the dir is empty
    touch "{{dir_to_delete}}/dummy.txt"
    mv "{{dir_to_delete}}"/* "${tempdir}/"
    # by default dotglob will prevent hidden files from being included in * wildcard globs
    if [ -d "${tempdir}/.git" ]; then
        mv "${tempdir}/.git" "{{dir_to_delete}}"
    fi
    if [ -f "${tempdir}/README.md" ]; then
        mv "${tempdir}/README.md" "{{dir_to_delete}}"
    fi
    rm -rf "$tempdir"

# Adds the LICENSE file to a given directory
_add_license dpath:
    #!/usr/bin/env bash
    set -euo pipefail
    cd "{{dpath}}"
    # TODO - update this when final license is released
    echo "The Steel Compendium is an independent product published under the DRAW STEEL Creator License and is not affiliated with MCDM Productions, LLC. DRAW STEEL © 2024 MCDM Productions, LLC." > LICENSE
